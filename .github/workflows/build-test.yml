name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # backend_static_analysis:
  #   name: Backend Static Analysis
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '9.x'

  #     - name: Cache NuGet packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.nuget/packages
  #         key: dotnet-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
  #         restore-keys: dotnet-${{ runner.os }}-

  #     - name: Restore dependencies
  #       working-directory: backend
  #       run: dotnet restore Backgammon.sln

  #     - name: Run static analysis
  #       working-directory: backend
  #       run: dotnet format --verify-no-changes

#  backend_security:
#    name: Backend Security Analysis
#    runs-on: ubuntu-latest
#    needs: backend_static_analysis
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Install DevSkim (Microsoft)
#        run: dotnet tool install --global Microsoft.DevSkim.CLI
#
#      - name: Run DevSkim Security Scan
#        run: devskim analyze --directory . --output-format sarif

#   backend_tests:
#     name: Backend Unit Tests
#     runs-on: ubuntu-latest
# #    needs: backend_security
#     needs: backend_static_analysis
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up .NET
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: '9.x'

#       - name: Restore dependencies
#         working-directory: backend
#         run: dotnet restore Backgammon.sln

#       - name: Build solution
#         working-directory: backend
#         run: dotnet build Backgammon.sln --no-restore --configuration Release

#       - name: Run tests
#         working-directory: backend
#         run: dotnet test Backgammon.Tests/Backgammon.Tests.csproj --verbosity normal

  backend_build:
    name: Backend Build
    runs-on: ubuntu-latest
    # needs: backend_tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Restore dependencies
        working-directory: backend
        run: dotnet restore Backgammon.sln

      - name: Build backend
        working-directory: backend
        run: dotnet build Backgammon.sln --configuration Release
        
      - name: dotnet publish
        working-directory: backend
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
  
  backend_deploy:
    runs-on: ubuntu-latest
    needs: backend_build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./publish

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'backgammon'
          slot-name: 'Production'
          package: ./publish

  # frontend_static_analysis:
  #   name: Frontend Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '24'

  #     - name: Cache Node modules
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: node-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
  #         restore-keys: node-${{ runner.os }}-

  #     - name: Install dependencies
  #       working-directory: frontend
  #       run: npm ci

  #     - name: Run linter
  #       working-directory: frontend
  #       run: npx eslint src --ext .js,.jsx,.ts,.tsx --max-warnings 0

#  frontend_security:
#    name: Frontend Security Audit
#    runs-on: ubuntu-latest
#    needs: frontend_static_analysis
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '24'
#
#      - name: Install dependencies
#        working-directory: frontend
#        run: npm ci
#
#      - name: Run npm audit
#        working-directory: frontend
#        run: npm audit --audit-level=moderate

#   frontend_build:
#     name: Frontend Build
#     runs-on: ubuntu-latest
# #    needs: frontend_security
#     needs: frontend_static_analysis
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '24'

#       - name: Install dependencies
#         working-directory: frontend
#         run: npm ci

#       - name: Build frontend
#         working-directory: frontend
#         run: npm run build
